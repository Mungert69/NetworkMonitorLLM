#!/bin/bash
set -eo pipefail  # Exit on any error

# Check if enough arguments are passed
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <file_pattern> <string_to_replace> <replacement_string>"
    echo "Example: $0 'appsettings*' 'old_string' 'new_string'"
    exit 1
fi

# Safely assign arguments
file_pattern="$1"
string_to_replace="$2"
replacement_string="$3"

# Verify the pattern matches files before proceeding
shopt -s nullglob
files=($file_pattern)
shopt -u nullglob

if [ ${#files[@]} -eq 0 ]; then
    echo "Error: No files found matching pattern '$file_pattern'"
    exit 1
fi

# Function to escape strings for sed
escape_sed() {
    printf '%s\n' "$1" | sed -e 's/[\/&]/\\&/g' | sed -e 's/[]$*.^[]/\\&/g'
}

# Escape both strings
escaped_search=$(escape_sed "$string_to_replace")
escaped_replace=$(escape_sed "$replacement_string")

# Process files
for file in "${files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "Warning: '$file' is not a regular file, skipping"
        continue
    fi
    
    echo "Processing file: $file"
    
    # Create temp file for atomic replacement
    temp_file=$(mktemp)
    
    # Perform replacement with error checking
    if ! sed "s/$escaped_search/$escaped_replace/g" "$file" > "$temp_file"; then
        rm -f "$temp_file"
        echo "Error: Failed to process '$file'"
        exit 1
    fi
    
    # Preserve original permissions
    chmod --reference="$file" "$temp_file"
    
    # Atomic replacement
    if ! mv -f "$temp_file" "$file"; then
        echo "Error: Failed to update '$file'"
        rm -f "$temp_file"
        exit 1
    fi
done

echo "Successfully replaced all occurrences in ${#files[@]} file(s)"
